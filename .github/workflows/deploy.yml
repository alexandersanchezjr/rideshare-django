name: "Deploy"

on: 
  push:
    branches:
      - master

jobs:
    docker:
      name: Build and Push
      runs-on: ubuntu-latest

      steps:
        - name: Checkout Repo
          uses: actions/checkout@v3

        - name: Docker Setup Buildx
          uses: docker/setup-buildx-action@v3.0.0

        - name: Docker Login
          uses: docker/login-action@v1
          with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}

        - name: Build and Push Docker Backend Image
          uses: docker/build-push-action@v5.0.0
          with:
            context: ./backend  # Context remains the same (current directory)
            file: ./backend/Dockerfile  # Dynamic Dockerfile path
            push: true  # Enable pushing the image
            tags: ${{ secrets.DOCKER_USERNAME }}/rideshare-backend:latest  # Separate tags for services

        - name: Build and Push Docker Frontend Image
          uses: docker/build-push-action@v5.0.0
          with:
            context: ./frontend  # Context remains the same (current directory)
            file: ./frontend/Dockerfile  # Dynamic Dockerfile path
            push: true  # Enable pushing the image
            tags: ${{ secrets.DOCKER_USERNAME }}/rideshare-frontend:latest  # Separate tags for services
            build-args: |
              HOSTNAME=${{ vars.HOSTNAME }}
              GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }}

    deploy:
      name: Deploy to EC2
      runs-on: ubuntu-latest
      needs: docker
      steps:
        - uses: actions/checkout@v2 
        - name: Build & Deploy
          env:
            PRIVATE_KEY: |
              ${{ secrets.PRIVATE_KEY }}
            HOSTNAME: ${{vars.HOSTNAME}}
            USER_NAME: ec2-user
          run: |
            echo "$PRIVATE_KEY" > pkey.pem && chmod 600 pkey.pem
            scp -o StrictHostKeyChecking=no -i pkey.pem docker-compose.yaml ${USER_NAME}@${HOSTNAME}:/
            ssh -o StrictHostKeyChecking=no -i pkey.pem ${USER_NAME}@${HOSTNAME} '
  
                # Change to the directory where docker-compose.yml is located
                cd /
                
                # Pull the latest images (if necessary)
                docker-compose pull

                # Start the services using Docker Compose
                docker-compose up -d
                '